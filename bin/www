#!/usr/bin/env node

const fs = require('fs');

fs.writeFileSync('./process.pid',process.pid,'utf-8');
setTimeout( () => {
    let pid = fs.readFileSync('./process.pid');
    global.isMaster = pid == process.pid ? true : false;
},50 );

/**
 * Defined global variables.
 */
 
global.Log = console.log;
global.seqModel = {};


const config = require('../config');
process.env.PORT = config.port;
process.env.secret = config.secret;
process.env.redisOption = {
    port:config.redisOption.port,
    host:config.redisOption.host
};

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('cwebgl-bate:server');
var https = require('https');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var options = {
    key:fs.readFileSync('./utils/private.pem'),
    cert:fs.readFileSync('./utils/file.crt')
};
var server = https.createServer(options,app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
